// <auto-generated />
using System;
using FEPPeopleAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FEPPeopleAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FEPPeopleAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Forename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Contract", b =>
                {
                    b.Property<int>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractID"));

                    b.Property<decimal>("DayRate")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<int>("OrganisationID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractID");

                    b.HasIndex("OrganisationID");

                    b.HasIndex("PersonID");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.ContractDay", b =>
                {
                    b.Property<int>("ContractDayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractDayID"));

                    b.Property<int>("ContractID")
                        .HasColumnType("int");

                    b.Property<int>("DayID")
                        .HasColumnType("int");

                    b.HasKey("ContractDayID");

                    b.HasIndex("ContractID");

                    b.ToTable("ContractDay");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HolidayID");

                    b.HasIndex("PersonID");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Lead", b =>
                {
                    b.Property<int>("LeadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeadID"));

                    b.Property<DateTime>("EnquiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedDayRate")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("EstimatedDays")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("LeadID");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.LeadDay", b =>
                {
                    b.Property<int>("LeadDayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeadDayID"));

                    b.Property<int>("DayID")
                        .HasColumnType("int");

                    b.Property<int>("LeadID")
                        .HasColumnType("int");

                    b.HasKey("LeadDayID");

                    b.HasIndex("LeadID");

                    b.ToTable("LeadDay");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.LeadSpecialism", b =>
                {
                    b.Property<int>("LeadSpecialismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeadSpecialismID"));

                    b.Property<int?>("LeadID")
                        .HasColumnType("int");

                    b.Property<int>("SpecialismID")
                        .HasColumnType("int");

                    b.HasKey("LeadSpecialismID");

                    b.HasIndex("LeadID");

                    b.HasIndex("SpecialismID");

                    b.ToTable("LeadSpecialism");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteID"));

                    b.Property<string>("NoteText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.Property<string>("ObjectType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Organisation", b =>
                {
                    b.Property<int>("OrganisationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganisationID"));

                    b.Property<string>("OrganisationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrganisationStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("OrganisationTypeID")
                        .HasColumnType("int");

                    b.HasKey("OrganisationID");

                    b.HasIndex("OrganisationStatusID");

                    b.HasIndex("OrganisationTypeID");

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.OrganisationStatus", b =>
                {
                    b.Property<int>("OrganisationStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganisationStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("OrganisationStatusID");

                    b.ToTable("OrganisationStatus");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.OrganisationType", b =>
                {
                    b.Property<int>("OrganisationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganisationTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("OrganisationTypeID");

                    b.ToTable("OrganisationType");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PersonTypeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PersonID");

                    b.HasIndex("PersonTypeID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.PersonAvailability", b =>
                {
                    b.Property<int>("PersonAvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonAvailabilityID"));

                    b.Property<int>("DayID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("PersonAvailabilityID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonAvailability");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.PersonSpecialism", b =>
                {
                    b.Property<int>("PersonSpecialismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonSpecialismID"));

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("SpecialismID")
                        .HasColumnType("int");

                    b.HasKey("PersonSpecialismID");

                    b.HasIndex("PersonID");

                    b.HasIndex("SpecialismID");

                    b.ToTable("PersonSpecialism");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.PersonType", b =>
                {
                    b.Property<int>("PersonTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("PersonTypeID");

                    b.ToTable("PersonType");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Specialism", b =>
                {
                    b.Property<int>("SpecialismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialismID"));

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialismName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecialismID");

                    b.ToTable("Specialism");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Contract", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FEPPeopleAPI.Models.Person", "Person")
                        .WithMany("Contract")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.ContractDay", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.Contract", null)
                        .WithMany("ContractDay")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Holiday", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.LeadDay", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.Lead", null)
                        .WithMany("LeadDay")
                        .HasForeignKey("LeadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.LeadSpecialism", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.Lead", "Lead")
                        .WithMany("LeadSpecialism")
                        .HasForeignKey("LeadID");

                    b.HasOne("FEPPeopleAPI.Models.Specialism", "Specialism")
                        .WithMany()
                        .HasForeignKey("SpecialismID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("Specialism");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Organisation", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.OrganisationStatus", "OrganisationStatus")
                        .WithMany()
                        .HasForeignKey("OrganisationStatusID");

                    b.HasOne("FEPPeopleAPI.Models.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeID");

                    b.Navigation("OrganisationStatus");

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Person", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.PersonAvailability", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.Person", null)
                        .WithMany("PersonAvailability")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.PersonSpecialism", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.Person", "Person")
                        .WithMany("PersonSpecialism")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FEPPeopleAPI.Models.Specialism", "Specialism")
                        .WithMany()
                        .HasForeignKey("SpecialismID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Specialism");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FEPPeopleAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FEPPeopleAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Contract", b =>
                {
                    b.Navigation("ContractDay");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Lead", b =>
                {
                    b.Navigation("LeadDay");

                    b.Navigation("LeadSpecialism");
                });

            modelBuilder.Entity("FEPPeopleAPI.Models.Person", b =>
                {
                    b.Navigation("Contract");

                    b.Navigation("PersonAvailability");

                    b.Navigation("PersonSpecialism");
                });
#pragma warning restore 612, 618
        }
    }
}
